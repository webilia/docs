---
import { existsSync } from 'node:fs';
import path from 'node:path';

const route = Astro.locals.starlightRoute;
const { entry } = route;
// If breadcrumb explicitly disabled in frontmatter, do not render anything.
const { breadcrumb } = entry.data;
if (breadcrumb === false) return;

const docsRoot = path.resolve(process.cwd(), 'src', 'content', 'docs');

const toTitle = (slug: string) =>
  slug
    .split('-')
    .map((s: string) => s.charAt(0).toUpperCase() + s.slice(1))
    .join(' ');

const hasIndex = (segs: string[]) =>
  existsSync(path.join(docsRoot, ...segs, 'index.mdx'));

const segments = Astro.url.pathname.split('/').filter(Boolean);
const crumbs = [];

for (let i = 0; i < segments.length; i++) {
  if (i === segments.length - 1) {
    crumbs.push({ label: entry.data.title });
  } else {
    const pathSegments = segments.slice(0, i + 1);
    const label = toTitle(segments[i]);
    const href = hasIndex(pathSegments)
      ? `/${pathSegments.join('/')}/`
      : undefined;
    crumbs.push({ label, href });
  }
}
---
{crumbs.length > 1 && (
  <nav class="breadcrumb">
    {crumbs.map((c, i) => (
      <>
        {i > 0 && <span class="separator">/</span>}
        {c.href ? <a href={c.href}>{c.label}</a> : <span class="current">{c.label}</span>}
      </>
    ))}
  </nav>
)}

<style>
  @layer starlight.core {
    .breadcrumb {
      margin-top: 1rem;
      font-size: 0.875rem;
      color: var(--sl-color-gray-3);
      display: flex;
      flex-wrap: wrap;
      gap: 0.375rem;
    }
    .breadcrumb a {
      color: var(--sl-color-gray-3);
      text-decoration: none;
    }
    .breadcrumb a:hover {
      text-decoration: underline;
    }
    .separator {
      opacity: 0.6;
    }
  }
</style>
